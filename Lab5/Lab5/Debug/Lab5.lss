
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000456  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  00000456  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000818  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020e  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000642  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000251  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001cff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 e5       	ldi	r30, 0x56	; 86
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 31       	cpi	r26, 0x12	; 18
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
 234:	0c 94 29 02 	jmp	0x452	; 0x452 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <EBI_init>:
*           enables inside CPLD.
* Inputs:
* Output:
************************************************************************************/
void EBI_init()
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	EBI_3port_init();
 244:	0e 94 2b 01 	call	0x256	; 0x256 <EBI_3port_init>
	CS0_init();
 248:	0e 94 4b 01 	call	0x296	; 0x296 <CS0_init>
	CS1_init();
 24c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <CS1_init>
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <EBI_3port_init>:

void EBI_3port_init()
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
	    PORTH.DIR = 0x37;       // Enable RE, WE, CS0, CS1, ALE1
 25e:	80 ee       	ldi	r24, 0xE0	; 224
 260:	96 e0       	ldi	r25, 0x06	; 6
 262:	27 e3       	ldi	r18, 0x37	; 55
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
	    PORTH.OUT = 0x33;
 268:	80 ee       	ldi	r24, 0xE0	; 224
 26a:	96 e0       	ldi	r25, 0x06	; 6
 26c:	23 e3       	ldi	r18, 0x33	; 51
 26e:	fc 01       	movw	r30, r24
 270:	24 83       	std	Z+4, r18	; 0x04
	    PORTJ.OUTSET = 0xFF;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	97 e0       	ldi	r25, 0x07	; 7
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	fc 01       	movw	r30, r24
 27a:	25 83       	std	Z+5, r18	; 0x05
		PORTK.DIR = 0xFF;   //Enable Address 7:0 (outputs)
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	97 e0       	ldi	r25, 0x07	; 7
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
	    
	    EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;            // ALE1 multiplexing, 3 port configuration	
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	94 e0       	ldi	r25, 0x04	; 4
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <CS0_init>:

void CS0_init()
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
	    EBI.CS0.BASEADDRH = (uint8_t) (CS0_Start >> 16) & 0xFF;
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	94 e0       	ldi	r25, 0x04	; 4
 2a2:	28 e2       	ldi	r18, 0x28	; 40
 2a4:	fc 01       	movw	r30, r24
 2a6:	23 8b       	std	Z+19, r18	; 0x13
		EBI.CS0.BASEADDRL = (uint8_t) (CS0_Start >> 8) & 0xFF;  //Set CS0 range from range specified
 2a8:	80 e4       	ldi	r24, 0x40	; 64
 2aa:	94 e0       	ldi	r25, 0x04	; 4
 2ac:	20 e8       	ldi	r18, 0x80	; 128
 2ae:	fc 01       	movw	r30, r24
 2b0:	22 8b       	std	Z+18, r18	; 0x12
	    EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_8KB_gc;	    // SRAM mode, 8k address space
 2b2:	80 e4       	ldi	r24, 0x40	; 64
 2b4:	94 e0       	ldi	r25, 0x04	; 4
 2b6:	25 e1       	ldi	r18, 0x15	; 21
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 8b       	std	Z+16, r18	; 0x10
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <CS1_init>:

void CS1_init()
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
	    EBI.CS1.BASEADDR = (uint16_t) (CS1_Start>>8) & 0xFFFF;          // Set CS1 range to 0x394000 - 0x397FFF
 2ca:	80 e4       	ldi	r24, 0x40	; 64
 2cc:	94 e0       	ldi	r25, 0x04	; 4
 2ce:	20 e4       	ldi	r18, 0x40	; 64
 2d0:	39 e3       	ldi	r19, 0x39	; 57
 2d2:	fc 01       	movw	r30, r24
 2d4:	26 8b       	std	Z+22, r18	; 0x16
 2d6:	37 8b       	std	Z+23, r19	; 0x17
	    EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_16KB_gc;
 2d8:	80 e4       	ldi	r24, 0x40	; 64
 2da:	94 e0       	ldi	r25, 0x04	; 4
 2dc:	29 e1       	ldi	r18, 0x19	; 25
 2de:	fc 01       	movw	r30, r24
 2e0:	24 8b       	std	Z+20, r18	; 0x14
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <LCD_OUT_CHAR>:
	pollBF();
	__far_mem_write(LCD_CMD, 0x01);
}

void LCD_OUT_CHAR(char c)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	25 97       	sbiw	r28, 0x05	; 5
 2f2:	cd bf       	out	0x3d, r28	; 61
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	8d 83       	std	Y+5, r24	; 0x05
    pollBF();
 2f8:	0e 94 03 02 	call	0x406	; 0x406 <pollBF>
    __far_mem_write(LCD_DATA, c);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e5       	ldi	r25, 0x50	; 80
 300:	a9 e3       	ldi	r26, 0x39	; 57
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	ab 83       	std	Y+3, r26	; 0x03
 30a:	bc 83       	std	Y+4, r27	; 0x04
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
 310:	ab 81       	ldd	r26, Y+3	; 0x03
 312:	bc 81       	ldd	r27, Y+4	; 0x04
 314:	2d 81       	ldd	r18, Y+5	; 0x05
 316:	0b b6       	in	r0, 0x3b	; 59
 318:	ab bf       	out	0x3b, r26	; 59
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
 31e:	0b be       	out	0x3b, r0	; 59
}
 320:	25 96       	adiw	r28, 0x05	; 5
 322:	cd bf       	out	0x3d, r28	; 61
 324:	de bf       	out	0x3e, r29	; 62
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <LCD_OUT_STR>:

void LCD_OUT_STR(char* STR)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	1f 92       	push	r1
 332:	1f 92       	push	r1
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	9a 83       	std	Y+2, r25	; 0x02
    while( *STR )
 33c:	0b c0       	rjmp	.+22     	; 0x354 <LCD_OUT_STR+0x28>
    {
        LCD_OUT_CHAR(*STR++);
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	9a 81       	ldd	r25, Y+2	; 0x02
 342:	9c 01       	movw	r18, r24
 344:	2f 5f       	subi	r18, 0xFF	; 255
 346:	3f 4f       	sbci	r19, 0xFF	; 255
 348:	29 83       	std	Y+1, r18	; 0x01
 34a:	3a 83       	std	Y+2, r19	; 0x02
 34c:	fc 01       	movw	r30, r24
 34e:	80 81       	ld	r24, Z
 350:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_OUT_CHAR>
    __far_mem_write(LCD_DATA, c);
}

void LCD_OUT_STR(char* STR)
{
    while( *STR )
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	9a 81       	ldd	r25, Y+2	; 0x02
 358:	fc 01       	movw	r30, r24
 35a:	80 81       	ld	r24, Z
 35c:	88 23       	and	r24, r24
 35e:	79 f7       	brne	.-34     	; 0x33e <LCD_OUT_STR+0x12>
    {
        LCD_OUT_CHAR(*STR++);
    }
}
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <main>:

int main(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	2c 97       	sbiw	r28, 0x0c	; 12
 374:	cd bf       	out	0x3d, r28	; 61
 376:	de bf       	out	0x3e, r29	; 62
    /* Replace with your application code */
		EBI_init();	// Ready Ebi since LCD is bound to external addresse
 378:	0e 94 1e 01 	call	0x23c	; 0x23c <EBI_init>
		
		pollBF();
 37c:	0e 94 03 02 	call	0x406	; 0x406 <pollBF>
		__far_mem_write(LCD_CMD, 0x38);
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e5       	ldi	r25, 0x50	; 80
 384:	a9 e3       	ldi	r26, 0x39	; 57
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	9a 83       	std	Y+2, r25	; 0x02
 38c:	ab 83       	std	Y+3, r26	; 0x03
 38e:	bc 83       	std	Y+4, r27	; 0x04
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	9a 81       	ldd	r25, Y+2	; 0x02
 394:	ab 81       	ldd	r26, Y+3	; 0x03
 396:	bc 81       	ldd	r27, Y+4	; 0x04
 398:	28 e3       	ldi	r18, 0x38	; 56
 39a:	0b b6       	in	r0, 0x3b	; 59
 39c:	ab bf       	out	0x3b, r26	; 59
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
 3a2:	0b be       	out	0x3b, r0	; 59
		pollBF();
 3a4:	0e 94 03 02 	call	0x406	; 0x406 <pollBF>
		__far_mem_write(LCD_CMD, 0x0F);
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e5       	ldi	r25, 0x50	; 80
 3ac:	a9 e3       	ldi	r26, 0x39	; 57
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	8d 83       	std	Y+5, r24	; 0x05
 3b2:	9e 83       	std	Y+6, r25	; 0x06
 3b4:	af 83       	std	Y+7, r26	; 0x07
 3b6:	b8 87       	std	Y+8, r27	; 0x08
 3b8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ba:	9e 81       	ldd	r25, Y+6	; 0x06
 3bc:	af 81       	ldd	r26, Y+7	; 0x07
 3be:	b8 85       	ldd	r27, Y+8	; 0x08
 3c0:	2f e0       	ldi	r18, 0x0F	; 15
 3c2:	0b b6       	in	r0, 0x3b	; 59
 3c4:	ab bf       	out	0x3b, r26	; 59
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
 3ca:	0b be       	out	0x3b, r0	; 59
		pollBF();
 3cc:	0e 94 03 02 	call	0x406	; 0x406 <pollBF>
		__far_mem_write(LCD_CMD, 0x01);
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e5       	ldi	r25, 0x50	; 80
 3d4:	a9 e3       	ldi	r26, 0x39	; 57
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	89 87       	std	Y+9, r24	; 0x09
 3da:	9a 87       	std	Y+10, r25	; 0x0a
 3dc:	ab 87       	std	Y+11, r26	; 0x0b
 3de:	bc 87       	std	Y+12, r27	; 0x0c
 3e0:	89 85       	ldd	r24, Y+9	; 0x09
 3e2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3e4:	ab 85       	ldd	r26, Y+11	; 0x0b
 3e6:	bc 85       	ldd	r27, Y+12	; 0x0c
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	0b b6       	in	r0, 0x3b	; 59
 3ec:	ab bf       	out	0x3b, r26	; 59
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
 3f2:	0b be       	out	0x3b, r0	; 59
		pollBF();
 3f4:	0e 94 03 02 	call	0x406	; 0x406 <pollBF>
		LCD_OUT_STR("Robert Olsthoorn");
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e2       	ldi	r25, 0x20	; 32
 3fc:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_OUT_STR>
		
    while (1) 
    {
		pollBF();
 400:	0e 94 03 02 	call	0x406	; 0x406 <pollBF>
    }
 404:	fd cf       	rjmp	.-6      	; 0x400 <__FUSE_REGION_LENGTH__>

00000406 <pollBF>:
}

void pollBF(){
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	00 d0       	rcall	.+0      	; 0x40c <pollBF+0x6>
 40c:	00 d0       	rcall	.+0      	; 0x40e <pollBF+0x8>
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
	asm volatile("nop");
 412:	00 00       	nop
	asm volatile("nop");
 414:	00 00       	nop
	volatile uint8_t bf = 0;
 416:	1e 82       	std	Y+6, r1	; 0x06
	do{
		bf = __far_mem_read(LCD_CMD);
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e5       	ldi	r25, 0x50	; 80
 41c:	a9 e3       	ldi	r26, 0x39	; 57
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	89 83       	std	Y+1, r24	; 0x01
 422:	9a 83       	std	Y+2, r25	; 0x02
 424:	ab 83       	std	Y+3, r26	; 0x03
 426:	bc 83       	std	Y+4, r27	; 0x04
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	9a 81       	ldd	r25, Y+2	; 0x02
 42c:	ab 81       	ldd	r26, Y+3	; 0x03
 42e:	bc 81       	ldd	r27, Y+4	; 0x04
 430:	0b b6       	in	r0, 0x3b	; 59
 432:	ab bf       	out	0x3b, r26	; 59
 434:	fc 01       	movw	r30, r24
 436:	80 81       	ld	r24, Z
 438:	0b be       	out	0x3b, r0	; 59
 43a:	8d 83       	std	Y+5, r24	; 0x05
 43c:	8d 81       	ldd	r24, Y+5	; 0x05
 43e:	8e 83       	std	Y+6, r24	; 0x06
	}while((bf & 0x80)==0x80);
 440:	8e 81       	ldd	r24, Y+6	; 0x06
 442:	88 23       	and	r24, r24
 444:	4c f3       	brlt	.-46     	; 0x418 <pollBF+0x12>
 446:	26 96       	adiw	r28, 0x06	; 6
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
